(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{351:function(e,t,a){"use strict";a.r(t);var n=a(18),i=function(e){e.options.__data__block__={mermaid_382ee1c2:'classDiagram\n    class AlbumObject {\n        <<Core Data>>\n        String id\n        String name\n        String emoji\n        Array~String~ songs\n        +getSongCount() int\n        +getFormattedTitle() String\n    }\n    \n    class UserSelections {\n        <<User Preferences>>\n        String albumId\n        Array~String~ selectedSongs\n        Array~String~ rankOrder\n        DateTime lastSaveTime\n        +addToRanking(songId) void\n        +removeFromRanking(songId) void\n        +moveInRanking(songId, newPosition) void\n        +canSaveRankings() boolean\n        +getTimeUntilNextSave() int\n    }\n    \n    class UserReviews {\n        <<User Content>>\n        String albumId\n        Number rating\n        String comment\n        DateTime timestamp\n        +updateRating(newRating) void\n        +updateComment(newComment) void\n        +shareReview() String\n    }\n    \n    class RankingHistory {\n        <<Version Control>>\n        String albumId\n        Array~HistoryEntry~ entries\n        +addEntry(changes) void\n        +getEntryByDate(date) HistoryEntry\n        +restoreRanking(entryId) void\n    }\n    \n    class HistoryEntry {\n        <<Change Record>>\n        String id\n        DateTime timestamp\n        Array~RankingChange~ changes\n        +getFormattedDate() String\n    }\n    \n    class RankingChange {\n        <<Diff Data>>\n        String songId\n        Number oldRank\n        Number newRank\n        String changeType\n        +getChangeDescription() String\n    }\n    \n    class UserAccount {\n        <<Authentication>>\n        String userId\n        String displayName\n        Boolean isGuest\n        Object privacySettings\n        +upgradeFromGuest() void\n        +updatePrivacySettings(settings) void\n    }\n    \n    class RedditVerification {\n        <<Social Auth>>\n        String redditUsername\n        Boolean isVerified\n        DateTime verifiedDate\n        String verificationStatus\n        +startVerification() void\n        +checkVerificationStatus() String\n    }\n    \n    class BestieMatching {\n        <<Social Data>>\n        Array~UserMatch~ matches\n        Number userRank\n        Number totalUsers\n        +refreshMatches() void\n        +filterByVerifiedOnly(boolean) void\n    }\n    \n    class UserMatch {\n        <<Comparison Data>>\n        String userId\n        String username\n        Number matchPercentage\n        Array~String~ commonFavorites\n        Boolean isVerified\n        +viewProfile() void\n    }\n    \n    AlbumObject "1" --o "0..1" UserSelections : references >\n    AlbumObject "1" --o "0..1" UserReviews : references >\n    UserSelections "1" --o "0..1" RankingHistory : tracks >\n    RankingHistory "1" --* "many" HistoryEntry : contains >\n    HistoryEntry "1" --* "many" RankingChange : details >\n    UserAccount "1" --o "0..1" RedditVerification : verifies >\n    UserAccount "1" --o "0..1" BestieMatching : compares >\n    BestieMatching "1" --* "many" UserMatch : ranks >\n',mermaid_382ee1e1:'erDiagram\n    LOCALSTORAGE ||--o{ APP_DATA : stores\n    SUPABASE ||--o{ USER_DATA : authenticates\n    SERVER ||--o{ SOCIAL_DATA : processes\n    \n    LOCALSTORAGE {\n        string key "music-besties-data"\n        object value\n    }\n    \n    APP_DATA {\n        object selectedSongs\n        object rankings\n        object reviews\n        object history\n        object userPreferences\n        object lastSaveTime\n    }\n    \n    SUPABASE {\n        string userId\n        object authData\n    }\n    \n    USER_DATA {\n        string displayName\n        boolean isGuest\n        object privacySettings\n        object redditVerification\n    }\n    \n    SERVER {\n        object matchingAlgorithm\n        object verificationStatus\n    }\n    \n    SOCIAL_DATA {\n        array bestieMatches\n        number userRank\n        object sharedContent\n    }\n'}},r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"data-overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-overview"}},[e._v("#")]),e._v(" Data Overview")]),e._v(" "),t("p",[e._v("This section provides a comprehensive overview of the data management approach in the Music Besties application v1.1.")]),e._v(" "),t("h2",{attrs:{id:"data-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-architecture"}},[e._v("#")]),e._v(" Data Architecture")]),e._v(" "),t("p",[e._v("Music Besties uses a structured data model to organize music era and song information. The application implements a unidirectional data flow pattern with several primary types of data:")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Static Era Data")]),e._v(": Pre-defined information about music eras including identifiers, titles, and song lists")]),e._v(" "),t("li",[t("strong",[e._v("User Preference Data")]),e._v(": User-generated content including selections, rankings, ratings, and reviews")]),e._v(" "),t("li",[t("strong",[e._v("History Data")]),e._v(": Timestamped records of ranking changes for tracking user preferences over time")]),e._v(" "),t("li",[t("strong",[e._v("User Account Data")]),e._v(": Optional user account information and authentication status")]),e._v(" "),t("li",[t("strong",[e._v("Social Data")]),e._v(": User matching data and Reddit verification status")])]),e._v(" "),t("p",[e._v("The data structure is designed to be lightweight and efficient, with a clear separation between core era data and user-specific preferences. This separation allows the application to reset user data without affecting the underlying era information if needed.")]),e._v(" "),t("h2",{attrs:{id:"data-models"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-models"}},[e._v("#")]),e._v(" Data Models")]),e._v(" "),t("p",[e._v("The application uses the following core data models:")]),e._v(" "),t("p",[t("strong",[e._v("Figure: Enhanced Data Structure Model")])]),e._v(" "),t("Mermaid",{attrs:{id:"mermaid_382ee1c2",graph:e.$dataBlock.mermaid_382ee1c2}}),t("h2",{attrs:{id:"storage-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-architecture"}},[e._v("#")]),e._v(" Storage Architecture")]),e._v(" "),t("p",[e._v("Data is stored in multiple locations depending on its type and purpose:")]),e._v(" "),t("p",[t("strong",[e._v("Figure: Enhanced Storage Data Structure")])]),e._v(" "),t("Mermaid",{attrs:{id:"mermaid_382ee1e1",graph:e.$dataBlock.mermaid_382ee1e1}}),t("h2",{attrs:{id:"storage-mechanisms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-mechanisms"}},[e._v("#")]),e._v(" Storage Mechanisms")]),e._v(" "),t("h3",{attrs:{id:"localstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" LocalStorage")]),e._v(" "),t("p",[e._v("The application uses the browser's LocalStorage API to persist user data between sessions. This approach allows:")]),e._v(" "),t("ul",[t("li",[e._v("No server-side storage requirements for core functionality")]),e._v(" "),t("li",[e._v("Data remains available even when offline")]),e._v(" "),t("li",[e._v("Simple API for storing and retrieving JSON data")])]),e._v(" "),t("h3",{attrs:{id:"in-memory-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-memory-state"}},[e._v("#")]),e._v(" In-memory State")]),e._v(" "),t("p",[e._v("During runtime, the application maintains an in-memory state that is synchronized with LocalStorage, providing:")]),e._v(" "),t("ul",[t("li",[e._v("Fast access to data during user interactions")]),e._v(" "),t("li",[e._v("Ability to make temporary changes before persisting")]),e._v(" "),t("li",[e._v("Simplified state management through Vue.js reactivity")])]),e._v(" "),t("h3",{attrs:{id:"supabase-integration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#supabase-integration"}},[e._v("#")]),e._v(" Supabase Integration")]),e._v(" "),t("p",[e._v("Version 1.1 introduces Supabase integration for user authentication and social features:")]),e._v(" "),t("ul",[t("li",[e._v("User accounts with optional guest mode")]),e._v(" "),t("li",[e._v("Secure authentication with email/password or social providers")]),e._v(" "),t("li",[e._v("Data synchronization between devices")]),e._v(" "),t("li",[e._v("User profile management")]),e._v(" "),t("li",[e._v("Privacy controls for shared content")])]),e._v(" "),t("h2",{attrs:{id:"new-data-features-in-v1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-data-features-in-v1-1"}},[e._v("#")]),e._v(" New Data Features in v1.1")]),e._v(" "),t("p",[e._v("Version 1.1 introduces several new data management features:")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("Ranking History")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Timestamped records of ranking changes")]),e._v(" "),t("li",[e._v("Ability to view and restore previous rankings")]),e._v(" "),t("li",[e._v("Change tracking with detailed diff information")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("User Accounts")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Optional registration with email/password")]),e._v(" "),t("li",[e._v("Guest mode for users who prefer not to create an account")]),e._v(" "),t("li",[e._v("Upgrade path from guest to registered user")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Social Features")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Reddit verification for user identity confirmation")]),e._v(" "),t("li",[e._v("Bestie matching algorithm to find users with similar taste")]),e._v(" "),t("li",[e._v("Privacy controls for shared content")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Enhanced Reviews")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Expanded review capabilities with ratings and comments")]),e._v(" "),t("li",[e._v("Review history tracking")]),e._v(" "),t("li",[e._v("Social sharing options")])])])]),e._v(" "),t("h2",{attrs:{id:"data-flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-flow"}},[e._v("#")]),e._v(" Data Flow")]),e._v(" "),t("p",[e._v("The application follows a unidirectional data flow pattern:")]),e._v(" "),t("ol",[t("li",[e._v("User interactions trigger actions")]),e._v(" "),t("li",[e._v("Actions update the in-memory state")]),e._v(" "),t("li",[e._v("State changes are persisted to LocalStorage and/or Supabase")]),e._v(" "),t("li",[e._v("UI components react to state changes and update accordingly")])]),e._v(" "),t("p",[e._v("This pattern ensures predictable application behavior and simplifies debugging by making data changes traceable.")])],1)}),[],!1,null,null,null);"function"==typeof i&&i(r);t.default=r.exports}}]);