(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{345:function(e,t,a){"use strict";a.r(t);var n=a(18),i=function(e){e.options.__data__block__={mermaid_382ee187:'classDiagram\n    class AlbumObject {\n        <<Core Data>>\n        String id\n        String name\n        String emoji\n        Array~String~ songs\n        +getSongCount() int\n        +getFormattedTitle() String\n    }\n    \n    class UserSelections {\n        <<User Preferences>>\n        String albumId\n        Array~String~ selectedSongs\n        Array~String~ rankOrder\n        +addToRanking(songId) void\n        +removeFromRanking(songId) void\n        +moveInRanking(songId, newPosition) void\n    }\n    \n    class UserReviews {\n        <<User Content>>\n        String albumId\n        Number rating\n        String comment\n        DateTime timestamp\n        +updateRating(newRating) void\n        +updateComment(newComment) void\n    }\n    \n    AlbumObject "1" --o "0..1" UserSelections : references >\n    AlbumObject "1" --o "0..1" UserReviews : references >\n',mermaid_382ee1a9:'erDiagram\n    LOCALSTORAGE ||--o{ ALBUM_DATA : stores\n    \n    LOCALSTORAGE {\n        string key "music-besties-data"\n        object value\n    }\n    \n    ALBUM_DATA {\n        object selectedSongs\n        object rankings\n        object reviews\n    }\n    \n    ALBUM_DATA ||--o{ SELECTED_SONGS : contains\n    ALBUM_DATA ||--o{ RANKINGS : contains\n    ALBUM_DATA ||--o{ REVIEWS : contains\n    \n    SELECTED_SONGS {\n        string albumId\n        array songList\n    }\n    \n    RANKINGS {\n        string categoryId\n        array orderedItems\n    }\n    \n    REVIEWS {\n        string albumId\n        number rating\n        string comment\n        datetime timestamp\n    }\n'}},s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"data-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-management"}},[e._v("#")]),e._v(" Data management")]),e._v(" "),t("p",[e._v("This section details the technical implementation of the Music Besties application.")]),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[e._v("Music Besties uses a structured data model to organize music era and song information. The application implements a unidirectional data flow pattern with two primary types of data:")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Static Era Data")]),e._v(": Pre-defined information about music eras including identifiers, titles, and song lists")]),e._v(" "),t("li",[t("strong",[e._v("User Preference Data")]),e._v(": User-generated content including selections, rankings, ratings, and reviews")])]),e._v(" "),t("p",[e._v("The data structure is designed to be lightweight and efficient, with a clear separation between core era data and user-specific preferences. This separation allows the application to reset user data without affecting the underlying era information if needed.")]),e._v(" "),t("p",[e._v("All data is stored locally in the browser's LocalStorage, structured as JSON objects for easy serialization and retrieval. The application uses a reactive state management approach to ensure that UI components automatically update when the underlying data changes.")]),e._v(" "),t("p",[t("strong",[e._v("Figure: Data Structure Model")])]),e._v(" "),t("Mermaid",{attrs:{id:"mermaid_382ee187",graph:e.$dataBlock.mermaid_382ee187}}),t("p",[t("em",[e._v("Conceptual diagram showing the relationships and composition of album objects, user selections, and review data. Provides developers with an understanding of the data architecture to properly implement state management.")])]),e._v(" "),t("h3",{attrs:{id:"state-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state-structure"}},[e._v("#")]),e._v(" State Structure")]),e._v(" "),t("p",[e._v("The application's state is stored in LocalStorage with this structure:")]),e._v(" "),t("p",[t("strong",[e._v("Figure: LocalStorage Data Structure")])]),e._v(" "),t("Mermaid",{attrs:{id:"mermaid_382ee1a9",graph:e.$dataBlock.mermaid_382ee1a9}}),t("p",[t("em",[e._v("Exact JSON structure showing the format of stored data including selectedSongs, rankings, and reviews with their nested properties. Ensures consistent data persistence implementation with the correct property names and data types.")])]),e._v(" "),t("p",[e._v("This structure is accessed via the key 'music-besties-data' in the browser's LocalStorage. The application loads this data on startup and updates it when changes are made to rankings or reviews.")]),e._v(" "),t("h2",{attrs:{id:"storage-mechanisms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-mechanisms"}},[e._v("#")]),e._v(" Storage Mechanisms")]),e._v(" "),t("h3",{attrs:{id:"localstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" LocalStorage")]),e._v(" "),t("p",[e._v("The application uses the browser's LocalStorage API to persist user data between sessions. This approach has the following advantages:")]),e._v(" "),t("ul",[t("li",[e._v("No server-side storage requirements")]),e._v(" "),t("li",[e._v("Data remains available even when offline")]),e._v(" "),t("li",[e._v("Simple API for storing and retrieving JSON data")])]),e._v(" "),t("p",[e._v("However, it also has limitations:")]),e._v(" "),t("ul",[t("li",[e._v("Limited storage capacity (typically 5-10MB)")]),e._v(" "),t("li",[e._v("Data is specific to a browser and device")]),e._v(" "),t("li",[e._v("No synchronization between devices")])]),e._v(" "),t("h3",{attrs:{id:"in-memory-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-memory-state"}},[e._v("#")]),e._v(" In-memory State")]),e._v(" "),t("p",[e._v("During runtime, the application maintains an in-memory state that is synchronized with LocalStorage. This approach provides:")]),e._v(" "),t("ul",[t("li",[e._v("Fast access to data during user interactions")]),e._v(" "),t("li",[e._v("Ability to make temporary changes before persisting")]),e._v(" "),t("li",[e._v("Simplified state management through Vue.js reactivity")])])],1)}),[],!1,null,null,null);"function"==typeof i&&i(s);t.default=s.exports}}]);